// ====================================
// KOI DASHBOARD - UTILITY FUNCTIONS
// File: js/utils.js
// ====================================

// Namespace per evitare conflitti
const KoiUtils = {
    
    // ===== STORAGE MANAGEMENT =====
    STORAGE_KEYS: {
        THEME: 'koi_theme',
        SETTINGS: 'koi_settings',
        BLOCKED_SLOTS: 'koi_blocked_slots_dates',
        CACHE: 'koi_dashboard_data'
    },

    // ===== DATE/TIME UTILITIES =====
    
    /**
     * Formatta data da ISO a formato italiano (dd/mm/yyyy)
     */
    formatDateForAPI: function(dateString) {
        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
    },

    /**
     * Parse data italiana in oggetto Date
     */
    parseItalianDate: function(dateString) {
        const [day, month, year] = dateString.split('/');
        return new Date(year, month - 1, day);
    },

    /**
     * Ottieni data di oggi in formato ISO
     */
    getTodayISO: function() {
        return new Date().toISOString().slice(0, 10);
    },

    /**
     * Ottieni data di oggi in formato italiano
     */
    getTodayItalian: function() {
        return new Date().toLocaleDateString('it-IT');
    },

    /**
     * Confronta date per ordinamento
     */
    sortByDateTimeDesc: function(a, b) {
        const dateA = new Date(a.data);
        const dateB = new Date(b.data);
        
        if (dateA.getTime() !== dateB.getTime()) {
            return dateB - dateA; // Most recent first
        }
        
        // If same date, sort by time
        const timeA = a.orario.split(':').map(Number);
        const timeB = b.orario.split(':').map(Number);
        
        return (timeB[0] * 60 + timeB[1]) - (timeA[0] * 60 + timeA[1]);
    },

    /**
     * Ottieni ultimi 7 giorni per grafici
     */
    getLast7Days: function() {
        const days = [];
        for (let i = 6; i >= 0; i--) {
            const date = new Date();
            date.setDate(date.getDate() - i);
            days.push(date.toLocaleDateString('it-IT', { weekday: 'short' }));
        }
        return days;
    },

    // ===== TIME SLOT UTILITIES =====
    
    /**
     * Genera tutti gli slot orari da 00:00 a 23:30
     */
    generateAllTimeSlots: function() {
        const slots = [];
        for (let h = 0; h < 24; h++) {
            for (let m = 0; m < 60; m += 30) {
                slots.push(`${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}`);
            }
        }
        return slots;
    },

    /**
     * Converte un range orario in slot da 30 minuti
     */
    toSlots: function(startHHMM, endHHMM) {
        let [h, m] = startHHMM.split(':').map(Number);
        const [eh, em] = endHHMM.split(':').map(Number);
        const out = [];
        while (h < eh || (h === eh && m < em)) {
            out.push(`${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}`);
            m += 30;
            if (m >= 60) {
                h++;
                m -= 60;
            }
        }
        return out;
    },

    /**
     * Aggiungi 30 minuti a un orario
     */
    add30Minutes: function(hhmm) {
        let [h, m] = hhmm.split(':').map(Number);
        m += 30;
        if (m >= 60) {
            h++;
            m -= 60;
        }
        return `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}`;
    },

    /**
     * Costruisci slot disponibili dalle impostazioni
     */
    buildSlotsFromSettings: function() {
        let s = JSON.parse(localStorage.getItem(this.STORAGE_KEYS.SETTINGS) || '{}');
        if (!s.lunchStart) {
            // fallback ai valori di default
            s = {
                lunchStart: '12:00',
                lunchEnd: '15:00',
                dinnerStart: '19:00',
                dinnerEnd: '23:00'
            };
        }
        const ranges = [];
        if (s.lunchStart && s.lunchEnd) ranges.push([s.lunchStart, s.lunchEnd]);
        if (s.dinnerStart && s.dinnerEnd) ranges.push([s.dinnerStart, s.dinnerEnd]);
        const out = [];
        ranges.forEach(([st, en]) => out.push(...this.toSlots(st, en)));
        return out;
    },

    // ===== EXCEPTION MANAGEMENT =====
    
    /**
     * Ottieni eccezioni/blocchi salvati
     */
    getExceptions: function() {
        return JSON.parse(localStorage.getItem(this.STORAGE_KEYS.BLOCKED_SLOTS) || '{}');
    },

    /**
     * Salva eccezioni/blocchi
     */
    saveExceptions: function(obj) {
        localStorage.setItem(this.STORAGE_KEYS.BLOCKED_SLOTS, JSON.stringify(obj));
    },

    // ===== LOCAL STORAGE =====
    
    /**
     * Salva dati in cache locale
     */
    saveToCache: function(data) {
        const cacheData = {
            ...data,
            lastUpdate: new Date().toISOString()
        };
        localStorage.setItem(this.STORAGE_KEYS.CACHE, JSON.stringify(cacheData));
    },

    /**
     * Carica dati dalla cache locale
     */
    loadFromCache: function() {
        const cached = localStorage.getItem(this.STORAGE_KEYS.CACHE);
        if (cached) {
            return JSON.parse(cached);
        }
        return null;
    },

    /**
     * Salva impostazioni
     */
    saveSettings: function(settings) {
        localStorage.setItem(this.STORAGE_KEYS.SETTINGS, JSON.stringify(settings));
    },

    /**
     * Carica impostazioni
     */
    loadSettings: function() {
        return JSON.parse(localStorage.getItem(this.STORAGE_KEYS.SETTINGS) || '{}');
    },

    // ===== THEME MANAGEMENT =====
    
    /**
     * Ottieni tema corrente
     */
    getCurrentTheme: function() {
        return localStorage.getItem(this.STORAGE_KEYS.THEME) || 'light';
    },

    /**
     * Salva tema
     */
    saveTheme: function(theme) {
        localStorage.setItem(this.STORAGE_KEYS.THEME, theme);
    },

    // ===== VALIDATION =====
    
    /**
     * Valida numero di telefono italiano
     */
    validatePhone: function(phone) {
        const cleaned = phone.replace(/\s+/g, '');
        const pattern = /^(\+39)?3\d{9}$/;
        return pattern.test(cleaned);
    },

    /**
     * Valida email
     */
    validateEmail: function(email) {
        const pattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return pattern.test(email);
    },

    // ===== MOBILE DETECTION =====
    
    /**
     * Controlla se dispositivo mobile
     */
    isMobile: function() {
        return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
    },

    /**
     * Controlla se iOS
     */
    isIOS: function() {
        return /iPhone|iPad|iPod/i.test(navigator.userAgent);
    },

    // ===== ANTI-CACHE =====
    
    /**
     * Aggiungi timestamp per evitare cache
     */
    addCacheBuster: function(url) {
        const separator = url.includes('?') ? '&' : '?';
        return url + separator + '_t=' + Date.now();
    },

    // ===== DEBOUNCE =====
    
    /**
     * Debounce function per ottimizzare performance
     */
    debounce: function(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    },

    // ===== FORMAT UTILITIES =====
    
    /**
     * Formatta numero di telefono per display
     */
    formatPhoneDisplay: function(phone) {
        if (!phone) return 'N/D';
        // Rimuovi spazi e caratteri extra
        const cleaned = phone.replace(/\D/g, '');
        // Formatta come +39 XXX XXX XXXX
        if (cleaned.length === 12 && cleaned.startsWith('39')) {
            return `+${cleaned.slice(0, 2)} ${cleaned.slice(2, 5)} ${cleaned.slice(5, 8)} ${cleaned.slice(8)}`;
        }
        return phone;
    },

    /**
     * Capitalizza prima lettera
     */
    capitalize: function(str) {
        if (!str) return '';
        return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
    },

    /**
     * Tronca testo lungo
     */
    truncate: function(str, length = 50) {
        if (!str || str.length <= length) return str;
        return str.substring(0, length) + '...';
    },

    // ===== ERROR HANDLING =====
    
    /**
     * Log errore con contesto
     */
    logError: function(context, error) {
        console.error(`[KOI Dashboard - ${context}]:`, error);
        // Qui potresti inviare l'errore a un servizio di monitoring
    },

    // ===== STATISTICS =====
    
    /**
     * Calcola statistiche prenotazioni
     */
    calculateStats: function(reservations) {
        const today = this.getTodayItalian();
        const todayReservations = reservations.filter(r => {
            const resDate = new Date(r.data).toLocaleDateString('it-IT');
            return resDate === today && r.stato === 'Confermata';
        });

        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
        
        const weekCovers = reservations
            .filter(r => {
                const resDate = new Date(r.data);
                return resDate >= oneWeekAgo && r.stato === 'Confermata';
            })
            .reduce((total, r) => total + parseInt(r.persone || 0), 0);

        return {
            todayCount: todayReservations.length,
            todayCovers: todayReservations.reduce((total, r) => total + parseInt(r.persone || 0), 0),
            weekCovers: weekCovers,
            totalReservations: reservations.length
        };
    }
};

// Esporta per uso globale
window.KoiUtils = KoiUtils;